#!/usr/bin/env bash

# For configuration, use the INIFILE
INIFILE=.pre-commitrc

declare -A verifiers
# the INIFILE can contain an associative array containing all verifiers

# Example:
# verifiers=(
#     ["description"]="binary;regular expression matching filetypes;prefix flags;post commands; post flags"
#     ["YAML"]="yamllint;\.(yaml|yml)$;--strict"
# )

# These are the default verifiers:
verifiers=(
    ["Jenkinsfile"]="lint-jenkins;^Jenkinsfile"
    ["Jinja"]="lintjinja;\.(j2|yaml|yml)$"
    ["Python"]="pylint;\.py;;pylint-exit;--error-fail $?"
    ["XML"]="xmllint;\.xml$"
    ["YAML"]="yamllint;\.(yaml|yml)$;--strict"
    ["formatting"]="prettier;.*;--check"
    ["reStructuredText"]="doc8;\.(rest|rst)$"
    ["shell"]="shellcheck;\.(bash|sh)$"
)

# Search in the git root for the INIFILE
FULLPATH=$(git rev-parse --show-toplevel 2>/dev/null)
if [[ -n "${FULLPATH}" ]]; then
    INIFILE="${FULLPATH}/${INIFILE}"
    # Ensure that this hook can be executed from anywhere in the git repository
    pushd "${FULLPATH}" &>/dev/null || true
fi

# Read INI file if it exists
if [[ -f "${INIFILE}" ]]; then
    echo "Reading settings from ${INIFILE}"
    # shellcheck disable=SC1090
    source "${INIFILE}"
fi

# The following parameters are supported:
# DISABLE_CHECK_ON_MASTER=TRUE  # Allow commits to master branch

# exit as soon as a test fails
set -e

if git rev-parse --verify HEAD >/dev/null 2>&1; then
    branch="$(git rev-parse --abbrev-ref HEAD)"
    against=HEAD
    tag="$(git tag --contains)"
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

# Redirect output to stderr.
exec 1>&2

check_branch() {
    # Check whether this is the master branch
    if [[ "${branch}" = "master" ]] && [[ -z "${DISABLE_CHECK_ON_MASTER}" ]]; then
        # Check whether this commit does not contain a tag
        if [[ -z "${tag}" ]]; then
            # Check whether the file isn't only CHANGELOG.md
            if [ "$(git diff --cached --name-only|xargs)" != "CHANGELOG.md" ]; then
               echo "Committing directly to master branch is not allowed, except for tags,"
               echo "or only the file CHANGELOG.md."
               echo "Bypass the pre-commit hook using the --no-verify parameter, or"
               echo "add the following string to the configuration file using:"
               echo "echo DISABLE_CHECK_ON_MASTER=TRUE >> ${INIFILE}"
               exit 1
            fi
        fi
    fi
}

check_verifiers() {
    # Check whether binaries are available
    for verifier in "${!verifiers[@]}"; do
        binary="$(echo "${verifiers[$verifier]}"|cut -d';' -f1)"
        post="$(echo "${verifiers[$verifier]}"|cut -d';' -f4)"
        if ! which "$binary" &>/dev/null; then
            echo "Could not find $binary, removing $verifier verifier"
            unset verifiers["$verifier"]
        fi
        if [[ -n $post ]] && ! which "$post" &>/dev/null; then
           echo "Could not find $post, removing $verifier verifier"
           unset verifiers["$verifier"]
        fi
    done
}

verify_file() {
    # Loop through each verifier and apply if it matches its regexp
    for verifier in "${!verifiers[@]}"; do
        binary="$(echo "${verifiers[$verifier]}"|cut -d';' -f1)"
        regexp="$(echo "${verifiers[$verifier]}"|cut -d';' -f2)"
        flags="$(echo "${verifiers[$verifier]}"|cut -d';' -f3)"
        post="$(echo "${verifiers[$verifier]}"|cut -d';' -f4)"
        if [[ -n $post ]]; then
            # Check whether post binary exists
            if ! which "$post" &>/dev/null; then
                echo "Could not find $post, removing $verifier verifier"
                unset verifiers["$verifier"]
                break
            fi
            # If a post binary has been set, use post parameters
            post="|| $post $(echo "${verifiers[$verifier]}"|cut -d';' -f5)"
        fi
        if [[ "$1" =~ ${regexp} ]]; then
            echo "Verifying $verifier of $1"
            # Check whether binary exists
            if ! which "$binary" &>/dev/null; then
                echo "Could not find $binary, removing $verifier verifier"
                unset verifiers["$verifier"]
                break
            fi
            # shellcheck disable=SC2086
            $binary $flags "$1" $post
        fi
    done
}

verify_files() {
    # Loop through each of the files and apply the verifiers
    for file in $(git diff --cached --name-only "${against}"); do
        if [[ -f "$file" ]]; then
            verify_file "$file"
        else
            echo "$file has been removed or renamed this commit"
        fi
    done
}

#check_verifiers
check_branch
verify_files

popd 1>/dev/null
